generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_DB_URL")
}

model Account {
  id                String    @id @default(cuid())
  userId            String    @db.Char(36)
  type              String    @db.VarChar(15)
  provider          String    @db.VarChar(15)
  providerAccountId String    @db.VarChar(50)
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?   @db.VarChar(50)
  scope             String?   @db.Text
  id_token          String?   @db.Text
  session_state     String?   @db.VarChar(100)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique @db.VarChar(40)
  userId       String    @db.Char(36)
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
  @@index([userId])
  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  name          String?     @db.VarChar(50)
  email         String?     @unique @db.VarChar(100)
  emailVerified DateTime?
  image         String?
  roles         String      @default("guest")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?
  accounts      Account[]
  sessions      Session[]
  userPrefs     UserPrefs[]

  @@index([name])
  @@index([email])
  @@map(name: "users")
}

model VerificationToken {
  token      String    @id @db.VarChar(50)
  identifier String    @db.VarChar(50)
  expires    DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model UserPrefs {
  id        String    @id @default(cuid())
  userId    String    @unique @db.Char(36)
  theme     String?   @db.MediumText
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([userId])
  @@map("userprefs")
}
