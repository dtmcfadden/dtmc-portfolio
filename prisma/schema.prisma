generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_DB_URL")
}

model Account {
  id                String    @id @default(cuid()) @db.Char(36)
  userId            String    @db.Char(36)
  type              String    @db.VarChar(15)
  provider          String    @db.VarChar(15)
  providerAccountId String    @db.VarChar(50)
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?   @db.VarChar(50)
  scope             String?   @db.Text
  id_token          String?   @db.Text
  session_state     String?   @db.VarChar(100)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String    @id @default(cuid()) @db.Char(36)
  sessionToken String    @unique @db.VarChar(40)
  userId       String    @db.Char(36)
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
  @@index([userId])
  @@map("sessions")
}

model User {
  id            String         @id @default(cuid()) @db.Char(36)
  name          String?        @db.VarChar(50)
  email         String?        @unique @db.VarChar(100)
  emailVerified DateTime?
  image         String?
  roles         String         @default("guest")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?
  accounts      Account[]
  sessions      Session[]
  userprefs     UserPrefs[]
  todocategory  TodoCategory[]

  @@index([name])
  @@index([email])
  @@map(name: "users")
}

model VerificationToken {
  token      String    @id @db.VarChar(50)
  identifier String    @db.VarChar(50)
  expires    DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model UserPrefs {
  id        String    @id @default(cuid()) @db.Char(36)
  userId    String    @unique @db.Char(36)
  theme     String?   @db.MediumText
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([userId])
  @@map("userprefs")
}

model TodoCategory {
  id            String         @id @default(cuid()) @db.Char(36)
  userId        String         @db.Char(36)
  categoryId    DateTime       @default(now()) @db.DateTime(3)
  parentId      DateTime?      @db.DateTime(3)
  name          String         @db.VarChar(25)
  entryposition TodoPosition[]
  catEntry      TodoCatEntry[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
  // @@unique([userId(length: 36), Id()])
  @@map("todocategory")
}

model TodoCatEntry {
  id         String       @id @default(cuid()) @db.Char(36)
  userId     String       @db.Char(36)
  categoryId DateTime     @db.DateTime(3)
  entryId    DateTime     @db.DateTime(3)
  createdAt  DateTime     @default(now()) @db.DateTime(3)
  updatedAt  DateTime?    @db.DateTime(3)
  // category   TodoCategory[]
  entry      TodoEntry[]
  // user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   TodoCategory @relation(fields: [userId, categoryId], references: [userId, categoryId], onDelete: Cascade)

  @@unique([userId, categoryId, entryId])
  // @@unique([userId, categoryId])
  @@unique([userId, entryId])
  @@map("todocatentry")
}

model TodoPosition {
  id            String       @id @default(cuid()) @db.Char(36)
  userId        String       @db.Char(36)
  categoryId    DateTime     @db.DateTime(3)
  entryposition String       @db.LongText
  category      TodoCategory @relation(fields: [userId, categoryId], references: [userId, categoryId], onDelete: Cascade)

  @@unique([userId, categoryId])
  @@map("todoposition")
}

model TodoEntry {
  id       String       @id @default(cuid()) @db.Char(36)
  userId   String       @db.Char(36)
  entryId  DateTime     @default(now()) @db.DateTime(3)
  title    String       @db.Text
  entry    String       @db.LongText
  entrycat TodoCatEntry @relation(fields: [userId, entryId], references: [userId, entryId], onDelete: Cascade)

  @@unique([userId, entryId])
  // @@unique([userId(length: 36), Id()])
  @@map("todoentry")
}
